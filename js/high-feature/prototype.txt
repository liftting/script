使用原型 构造属性 和使用构造函数构造属性的区别？

1，构造函数内定义的属性继承方式与原型不同，子对象需要显式调用父对象才能继承构
造函数内定义的属性。

2，在构造函数内创建的属性 和 函数，统一构造函数产生的对象都不共享实例，

3，构造函数内定义的函数有运行时闭包的开销，因为构造函数内的局部变量对其中定义
的函数来说也是可见的

那什么时候选择什么？
1，除非必须用构造函数闭包，否则尽量用原型定义成员函数，因为这样可以减少开销。

2，尽量在构造函数内定义一般成员，尤其是对象或数组，因为用原型定义的成员是多个
实例共享的。

》》》》== 原型链
Object  Function直接提供的对象，

JavaScript 中有两个特殊的对象： Object 与 Function，它们都是构造函数，用于生成对象。

Object.prototype 是所有对象的祖先，

Function.prototype 是所有函数的原型，包括构造函数。


我把 JavaScript 中的对象分为三类，

一类是用户创建的对象，
一类是构造函数对象，
一类是原型对象。

用户创建的对象，即一般意义上用 new 语句显式构造的对象。

构造函数对象指的是普通的构造函数，即通过 new 调用生成普通对象的函数。

原型对象特指构造函数 prototype 属性指向的对象。

这三类对象中每一类都有一个 __proto__ 属性，它指向该对象的原型，从任何对象沿着它开始遍历都可以追溯到 Object.prototype。
构造函数对象有 prototype 属性，指向一个原型对象，通过该构造函数创建对象时，

被创建对象的 __proto__ 属性将会指向构造函数的 prototype 属性。原型对象有 constructor
属性，指向它对应的构造函数


》》》====


尽量将所有的成员函数通过原型定义，将属性在构造函数内定义，然后对构造函数使用
new 关键字创建对象。

绝对不要把属性作为原型定义，因为当要定义的属性是一个对象的时候，不同实例中的属性会指向同一地址
